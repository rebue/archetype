package ${modulePackage}.svc.impl;

<&
	if (idType=="String") {
&>
import java.util.UUID;
<&
	}
&>

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.annotation.Resource;

import org.apache.dubbo.config.annotation.Service;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.context.annotation.Lazy;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import ${modulePackage}.dao.${entityName}Dao;
import ${modulePackage}.jo.${entityName}Jo;
import ${modulePackage}.mapper.${entityName}Mapper;
import ${moClassFullName};
import ${modulePackage}.svc.${entityName}Svc;

import lombok.extern.slf4j.Slf4j;
import rebue.robotech.dic.ResultDic;
import rebue.robotech.ro.IdRo;
import rebue.robotech.ro.Ro;
import rebue.robotech.svc.impl.BaseSvcImpl;

/**
 * ${table.remarks}
 *
 * <pre>
 * 注意：
 * 1. 查询数据库操作的方法，不用设置默认 @Transactional
 *    在类上方已经设置默认为 readOnly=true, propagation=Propagation.SUPPORTS
 *    而涉及到 增删改 数据库操作的方法时，要设置 readOnly=false, propagation=Propagation.REQUIRED
 * 2. 事务不会针对受控异常（checked exception）回滚
 *    要想回滚事务，须抛出运行时异常(RuntimeException)
 * 3. 如果类上方不带任何参数的 @Transactional 注解时，如同下面的设置
 *    propagation(传播模式)=REQUIRED，readOnly=false，isolation(事务隔离级别)=READ_COMMITTED
 * </pre>
 *
 * @mbg.generated 自动生成的注释，如需修改本注释，请删除本行
 */
@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
@Slf4j
@Service
public class ${entityName}SvcImpl extends BaseSvcImpl<<&
		for(id in ids){
			if(!idLP.first) {
				print(', ');
			}
		    print(id.value);
		}
	&>, ${entityName}Jo, ${entityName}Dao, ${moClassShortName}, ${entityName}Mapper> implements ${entityName}Svc {
	
    /**
     * 本服务的单例
     * 注意：内部调用自己的方法，如果涉及到回滚事务的，请不要直接调用，而是通过本实例调用
     * 
     * @mbg.generated 自动生成，如需修改，请删除本行
     */
    @Lazy
    @Resource
    private ${entityName}Svc thisSvc;

    /**
     * 添加${entityTitle}(自动生成ID)
     * 
     * @mbg.generated 自动生成，如需修改，请删除本行
     */
    @Override
    @Transactional(readOnly = false, propagation = Propagation.SUPPORTS)
    public Ro add(final ${moClassShortName} mo) {
    	log.info("${entityName}Svc.add: 添加${entityTitle} mo-{}", mo);
        // 如果id为空那么自动生成分布式id
        <&
        if (idType=="String") {
			println("        if (mo.getId() == null || mo.getId().trim().isEmpty()) {");
			println('            mo.setId(UUID.randomUUID().toString().replaceAll(\"-\", \"\"));');
	        println("        }");
		} else if (idType=="Long") {
			println("        if (mo.getId() == null || mo.getId() == 0) {");
			println("            mo.setId(_idWorker.getId());");
	        println("        }");
		}
        &>
        
        final Ro ro = thisSvc.add0(mo);
        if (ResultDic.SUCCESS.equals(ro.getResult())) {
            return new IdRo<>(ro.getResult(), ro.getMsg(), mo.getId());
        } else {
            return ro;
        }
    }

}
